// –ü—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç–∞–π–º-–∞—É—Ç–∞ –¥–ª—è API –§–ù–°
// –†–µ—à–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É "context deadline exceeded" —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	httpclient "gitlab.citydrive.tech/back-end/go/pkg/http-client"
)

// NalogRuAuthRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API –§–ù–°
type NalogRuAuthRequest struct {
	Inn      string `json:"inn"`
	Password string `json:"password"`
	DeviceOS string `json:"deviceOS"`
	DeviceId string `json:"deviceId"`
}

func main() {
	fmt.Println("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç–∞–π–º-–∞—É—Ç–∞ ===")

	// 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∫–∞–∫ –±—ã–ª–æ)
	fmt.Println("1. –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–∞–∫ –±—ã–ª–æ):")
	demonstrateProblematicConfig()

	fmt.Println("\n" + strings.Repeat("=", 70) + "\n")

	// 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∫–∞–∫ —Å—Ç–∞–ª–æ)
	fmt.Println("2. –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–∞–∫ —Å—Ç–∞–ª–æ):")
	demonstrateImprovedConfig()

	fmt.Println("\n" + strings.Repeat("=", 70) + "\n")

	// 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ-—Ç–∞–π–º-–∞—É—Ç –æ—à–∏–±–æ–∫
	fmt.Println("3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:")
	demonstrateNonTimeoutErrors()
}

// demonstrateProblematicConfig –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func demonstrateProblematicConfig() {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º-–∞—É—Ç–∞–º–∏ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
	config := httpclient.Config{
		Timeout:       5 * time.Second, // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è API –§–ù–°
		PerTryTimeout: 2 * time.Second, // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
		RetryEnabled:  false,           // Retry –æ—Ç–∫–ª—é—á—ë–Ω
	}

	client := httpclient.New(config, "refuel-receipts-old")
	defer client.Close()

	// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º-–∞—É—Ç–æ–º –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
	authRequest := NalogRuAuthRequest{
		Inn:      "1234567890",
		Password: "password",
		DeviceOS: "iOS",
		DeviceId: "device123",
	}

	jsonBody, _ := json.Marshal(authRequest)

	// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ "–º–µ–¥–ª–µ–Ω–Ω–æ–º—É" —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (—Å–∏–º—É–ª—è—Ü–∏—è API –§–ù–°)
	resp, err := client.Post(ctx, "https://httpbin.org/delay/10", bytes.NewReader(jsonBody),
		httpclient.WithContentType("application/json"),
		httpclient.WithIdempotencyKey("auth-request-12345"),
	)

	if err != nil {
		// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
		fmt.Printf("‚ùå –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n%s\n", err.Error())

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π —Ç–∞–π–º-–∞—É—Ç–∞
		var timeoutErr *httpclient.TimeoutError
		if errors.As(err, &timeoutErr) {
			fmt.Printf("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:\n")
			fmt.Printf("  ‚Ä¢ –ú–µ—Ç–æ–¥: %s\n", timeoutErr.Method)
			fmt.Printf("  ‚Ä¢ URL: %s\n", timeoutErr.URL)
			fmt.Printf("  ‚Ä¢ –•–æ—Å—Ç: %s\n", timeoutErr.Host)
			fmt.Printf("  ‚Ä¢ –ü–æ–ø—ã—Ç–∫–∞: %d –∏–∑ %d\n", timeoutErr.Attempt, timeoutErr.MaxAttempts)
			fmt.Printf("  ‚Ä¢ –û–±—â–∏–π —Ç–∞–π–º-–∞—É—Ç: %v\n", timeoutErr.Timeout)
			fmt.Printf("  ‚Ä¢ Per-try —Ç–∞–π–º-–∞—É—Ç: %v\n", timeoutErr.PerTryTimeout)
			fmt.Printf("  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", timeoutErr.Elapsed)
			fmt.Printf("  ‚Ä¢ –¢–∏–ø —Ç–∞–π–º-–∞—É—Ç–∞: %s\n", timeoutErr.TimeoutType)
			fmt.Printf("  ‚Ä¢ Retry –≤–∫–ª—é—á—ë–Ω: %t\n", timeoutErr.RetryEnabled)

			fmt.Printf("\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n")
			for i, suggestion := range timeoutErr.Suggestions {
				fmt.Printf("  %d. %s\n", i+1, suggestion)
			}
		}
		return
	}

	if resp != nil {
		resp.Body.Close()
		fmt.Printf("‚úÖ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: %s\n", resp.Status)
	}
}

// demonstrateImprovedConfig –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func demonstrateImprovedConfig() {
	// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –§–ù–°
	config := httpclient.Config{
		Timeout:       60 * time.Second, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ–±—â–∏–π —Ç–∞–π–º-–∞—É—Ç
		PerTryTimeout: 20 * time.Second, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π per-try —Ç–∞–π–º-–∞—É—Ç
		RetryEnabled:  true,             // –í–∫–ª—é—á—ë–Ω retry
		RetryConfig: httpclient.RetryConfig{
			MaxAttempts:       4, // 4 –ø–æ–ø—ã—Ç–∫–∏
			BaseDelay:         500 * time.Millisecond,
			MaxDelay:          15 * time.Second,
			Jitter:            0.3, // 30% jitter
			RespectRetryAfter: true,
			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è retry
			RetryStatusCodes: []int{408, 429, 500, 502, 503, 504, 520, 521, 522, 524},
		},
		TracingEnabled: true,
	}

	client := httpclient.New(config, "refuel-receipts-improved")
	defer client.Close()

	ctx := context.Background()

	authRequest := NalogRuAuthRequest{
		Inn:      "1234567890",
		Password: "password",
		DeviceOS: "iOS",
		DeviceId: "device123",
	}

	jsonBody, _ := json.Marshal(authRequest)

	fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")

	// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±—ã—Å—Ç—Ä–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—Ö–∞
	resp, err := client.Post(ctx, "https://httpbin.org/delay/1", bytes.NewReader(jsonBody),
		httpclient.WithContentType("application/json"),
		httpclient.WithIdempotencyKey("auth-request-improved-12345"),
	)

	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ (–¥–∞–∂–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π):\n%s\n", err.Error())

		var timeoutErr *httpclient.TimeoutError
		if errors.As(err, &timeoutErr) {
			fmt.Printf("\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n")
			for i, suggestion := range timeoutErr.Suggestions {
				fmt.Printf("  %d. %s\n", i+1, suggestion)
			}
		}
		return
	}

	if resp != nil {
		defer resp.Body.Close()
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: %s\n", resp.Status)
		fmt.Printf("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞:\n")
		fmt.Printf("  ‚Ä¢ –û–±—â–∏–π —Ç–∞–π–º-–∞—É—Ç: %v\n", config.Timeout)
		fmt.Printf("  ‚Ä¢ Per-try —Ç–∞–π–º-–∞—É—Ç: %v\n", config.PerTryTimeout)
		fmt.Printf("  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: %d\n", config.RetryConfig.MaxAttempts)
		fmt.Printf("  ‚Ä¢ Retry –≤–∫–ª—é—á—ë–Ω: %t\n", config.RetryEnabled)
	}
}

// demonstrateNonTimeoutErrors –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–µ-—Ç–∞–π–º-–∞—É—Ç –æ—à–∏–±–∫–∏ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
func demonstrateNonTimeoutErrors() {
	config := httpclient.Config{
		Timeout:       30 * time.Second,
		PerTryTimeout: 10 * time.Second,
		RetryEnabled:  true,
		RetryConfig: httpclient.RetryConfig{
			MaxAttempts: 3,
		},
	}

	client := httpclient.New(config, "error-demo")
	defer client.Close()

	ctx := context.Background()

	fmt.Println("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:")

	// 1. DNS –æ—à–∏–±–∫–∞
	fmt.Println("\n1. DNS –æ—à–∏–±–∫–∞:")
	_, err := client.Get(ctx, "https://nonexistent-domain-12345.com/api")
	if err != nil {
		var timeoutErr *httpclient.TimeoutError
		isTimeoutErr := errors.As(err, &timeoutErr)
		fmt.Printf("   –û—à–∏–±–∫–∞: %s\n", err.Error())
		fmt.Printf("   –≠—Ç–æ TimeoutError? %t\n", isTimeoutErr)
	}

	// 2. Connection refused
	fmt.Println("\n2. Connection refused:")
	_, err = client.Get(ctx, "http://127.0.0.1:99999/api")
	if err != nil {
		var timeoutErr *httpclient.TimeoutError
		isTimeoutErr := errors.As(err, &timeoutErr)
		fmt.Printf("   –û—à–∏–±–∫–∞: %s\n", err.Error())
		fmt.Printf("   –≠—Ç–æ TimeoutError? %t\n", isTimeoutErr)
	}

	// 3. HTTP —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∞
	fmt.Println("\n3. HTTP —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∞:")
	resp, err := client.Get(ctx, "https://httpbin.org/status/500")
	if err != nil {
		var timeoutErr *httpclient.TimeoutError
		isTimeoutErr := errors.As(err, &timeoutErr)
		fmt.Printf("   –û—à–∏–±–∫–∞: %s\n", err.Error())
		fmt.Printf("   –≠—Ç–æ TimeoutError? %t\n", isTimeoutErr)
	} else if resp != nil {
		defer resp.Body.Close()
		fmt.Printf("   HTTP —Å—Ç–∞—Ç—É—Å: %s (–Ω–µ –æ—à–∏–±–∫–∞, –∞ –æ—Ç–≤–µ—Ç)\n", resp.Status)
		fmt.Printf("   –≠—Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ TimeoutError\n")
	}

	fmt.Printf("\n‚úÖ –ö–∞–∫ –≤–∏–¥–∏—Ç–µ, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∞–π–º-–∞—É—Ç –æ—à–∏–±–∫–∏ —É–ª—É—á—à–∞—é—Ç—Å—è.\n")
	fmt.Printf("   –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏.\n")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
func handleError(err error, operation string) {
	if err == nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π —Ç–∞–π–º-–∞—É—Ç–∞
	var timeoutErr *httpclient.TimeoutError
	if errors.As(err, &timeoutErr) {
		log.Printf("‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ %s:", operation)
		log.Printf("   URL: %s", timeoutErr.URL)
		log.Printf("   –ü–æ–ø—ã—Ç–∫–∞: %d/%d", timeoutErr.Attempt, timeoutErr.MaxAttempts)
		log.Printf("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v", timeoutErr.Elapsed)
		log.Printf("   –¢–∏–ø: %s", timeoutErr.TimeoutType)

		// –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç–∞–π–º-–∞—É—Ç–æ–≤
		switch timeoutErr.TimeoutType {
		case "overall":
			log.Printf("   ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á—å—Ç–µ –æ–±—â–∏–π —Ç–∞–π–º-–∞—É—Ç —Å %v", timeoutErr.Timeout)
		case "per-try":
			log.Printf("   ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á—å—Ç–µ per-try —Ç–∞–π–º-–∞—É—Ç —Å %v", timeoutErr.PerTryTimeout)
		case "context":
			log.Printf("   ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞")
		}

		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ
	log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ %s: %v", operation, err)
}
