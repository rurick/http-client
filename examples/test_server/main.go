package main

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/prometheus/client_golang/prometheus/promhttp"
	httpclient "gitlab.citydrive.tech/back-end/go/pkg/http-client"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/prometheus"
	sdkmetric "go.opentelemetry.io/otel/sdk/metric"
	"go.uber.org/zap"
)

//go:embed index.html
var indexHTMLFS embed.FS

// TestRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ñ–æ—Ä–º—ã
type TestRequest struct {
	Method string `json:"method"`
	URL    string `json:"url"`
	Body   string `json:"body"`
}

// TestResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
type TestResponse struct {
	Status     string            `json:"status"`
	StatusCode int               `json:"status_code"`
	Headers    map[string]string `json:"headers"`
	Body       string            `json:"body"`
	Duration   string            `json:"duration"`
	Error      string            `json:"error,omitempty"`
}

// TestServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
type TestServer struct {
	client    *httpclient.Client
	logger    *zap.Logger
	startTime time.Time
}

// NewTestServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
func NewTestServer() *TestServer {
	logger, _ := zap.NewDevelopment()

	// –°–æ–∑–¥–∞–µ–º Prometheus exporter –¥–ª—è OpenTelemetry
	exporter, err := prometheus.New()
	if err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Prometheus exporter", zap.Error(err))
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenTelemetry metric provider
	provider := sdkmetric.NewMeterProvider(sdkmetric.WithReader(exporter))
	otel.SetMeterProvider(provider)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
	client, err := httpclient.NewClient(
		httpclient.WithMetrics(true),
		httpclient.WithMetricsMeterName("test-server-http-client"),
		httpclient.WithTimeout(30*time.Second),
	)
	if err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞", zap.Error(err))
	}

	return &TestServer{
		client:    client,
		logger:    logger,
		startTime: time.Now(),
	}
}

// handleIndex –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
func (ts *TestServer) handleIndex(w http.ResponseWriter, r *http.Request) {
	content, err := indexHTMLFS.ReadFile("index.html")
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Write(content)
}

// handleAPITest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
func (ts *TestServer) handleAPITest(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body, err := io.ReadAll(r.Body)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	var testReq TestRequest
	if err := json.Unmarshal(body, &testReq); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON", http.StatusBadRequest)
		return
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–∞—à HTTP –∫–ª–∏–µ–Ω—Ç
	response := ts.executeRequest(testReq)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// executeRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–∞—à –∫–ª–∏–µ–Ω—Ç
func (ts *TestServer) executeRequest(testReq TestRequest) TestResponse {
	start := time.Now()

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	var reqBody io.Reader
	if testReq.Body != "" {
		reqBody = strings.NewReader(testReq.Body)
	}

	req, err := http.NewRequestWithContext(ctx, testReq.Method, testReq.URL, reqBody)
	if err != nil {
		return TestResponse{
			Status:   "error",
			Error:    fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err),
			Duration: time.Since(start).String(),
		}
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type
	if testReq.Body != "" {
		req.Header.Set("Content-Type", "application/json")
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := ts.client.Do(req)
	duration := time.Since(start)

	if err != nil {
		return TestResponse{
			Status:   "error",
			Error:    fmt.Sprintf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err),
			Duration: duration.String(),
		}
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{
			Status:     "error",
			StatusCode: resp.StatusCode,
			Error:      fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err),
			Duration:   duration.String(),
		}
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := make(map[string]string)
	for key, values := range resp.Header {
		if len(values) > 0 {
			headers[key] = values[0]
		}
	}

	return TestResponse{
		Status:     "success",
		StatusCode: resp.StatusCode,
		Headers:    headers,
		Body:       string(respBody),
		Duration:   duration.String(),
	}
}

// setupRoutes –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
func (ts *TestServer) setupRoutes() *http.ServeMux {
	mux := http.NewServeMux()

	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	mux.HandleFunc("/", ts.handleIndex)

	// API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	mux.HandleFunc("/api/test", ts.handleAPITest)

	// Prometheus –º–µ—Ç—Ä–∏–∫–∏
	mux.Handle("/metrics", promhttp.Handler())

	return mux
}

func main() {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
	server := NewTestServer()
	defer server.logger.Sync()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	mux := server.setupRoutes()

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	httpServer := &http.Server{
		Addr:    "0.0.0.0:8080",
		Handler: mux,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		server.logger.Info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞",
			zap.String("host", "0.0.0.0"),
			zap.Int("port", 8080),
			zap.String("metrics", "/metrics"))

		fmt.Println("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")
		fmt.Println("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:8080/metrics")

		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			server.logger.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
		}
	}()

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	server.logger.Info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// Graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := httpServer.Shutdown(ctx); err != nil {
		server.logger.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
	}

	server.logger.Info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
}
