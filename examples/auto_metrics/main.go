package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus/promhttp"
	httpclient "github.com/rurick/http-client"
)

func main() {
	// –°–æ–∑–¥–∞—ë–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
	// –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
	client := httpclient.New(httpclient.Config{
		RetryEnabled: true,
		RetryConfig: httpclient.RetryConfig{
			MaxAttempts: 2,
		},
		// MetricsEnabled: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å
	}, "example-service")

	defer client.Close()

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		http.Handle("/metrics", promhttp.Handler()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π registry!
		log.Printf("–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ http://localhost:8080/metrics")
		if err := http.ListenAndServe(":8080", nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: %v", err)
		}
	}()

	// –°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç - –º–µ—Ç—Ä–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç
	client2 := httpclient.New(httpclient.Config{}, "another-service")
	defer client2.Close()

	fmt.Println("üöÄ HTTP –∫–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏!")
	fmt.Println("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ prometheus.DefaultRegistry")
	fmt.Println("üîó –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/metrics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫")
	fmt.Println()

	// –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
	ctx := context.Background()

	fmt.Println("–í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")

	// –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
	resp, err := client.Get(ctx, "https://httpbin.org/get")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
	} else {
		fmt.Printf("‚úÖ GET –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: %s\n", resp.Status)
		resp.Body.Close()
	}

	// –ó–∞–ø—Ä–æ—Å —Å retry (404)
	resp, err = client.Get(ctx, "https://httpbin.org/status/404")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
	} else {
		fmt.Printf("‚ö†Ô∏è  GET –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω: %s\n", resp.Status)
		resp.Body.Close()
	}

	// –ó–∞–ø—Ä–æ—Å –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	resp, err = client2.Get(ctx, "https://httpbin.org/json")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç client2: %v\n", err)
	} else {
		fmt.Printf("‚úÖ GET –∑–∞–ø—Ä–æ—Å –æ—Ç client2 —É—Å–ø–µ—à–µ–Ω: %s\n", resp.Status)
		resp.Body.Close()
	}

	fmt.Println()
	fmt.Println("üéØ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:")
	fmt.Println("   curl http://localhost:8080/metrics | grep http_client")
	fmt.Println()
	fmt.Println("üìà –í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –ª–µ–π–±–ª–∞–º–∏:")
	fmt.Println("   - client_name=\"example-service\"")
	fmt.Println("   - client_name=\"another-service\"")
	fmt.Println()

	// –ñ–¥—ë–º —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏
	fmt.Println("‚è≥ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(30 * time.Second)

	fmt.Println("‚ú® –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!")
}
