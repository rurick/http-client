package main

import (
	"fmt"
	"log"
	"time"

	httpclient "gitlab.citydrive.tech/back-end/go/pkg/http-client"
)

func main() {
	fmt.Println("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö retry –º–µ—Ç—Ä–∏–∫")
	fmt.Println("==========================================")

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
	retryStrategy := httpclient.NewExponentialBackoffStrategy(3, 100*time.Millisecond, 2*time.Second)

	client, err := httpclient.NewClient(
		httpclient.WithRetryStrategy(retryStrategy),
		httpclient.WithMetrics(true),
		httpclient.WithMetricsMeterName("retry-demo-client"),
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
	}

	fmt.Println("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ retry –º–µ—Ç—Ä–∏–∫–∞–º–∏")

	// –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç retry (500 –æ—à–∏–±–∫–∞)
	fmt.Println("\nüß™ –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å —Å 500 –æ—à–∏–±–∫–æ–π (–≤—ã–∑–æ–≤–µ—Ç retry)")
	resp1, err1 := client.Get("http://localhost:5000/test/status/500")
	if err1 != nil {
		fmt.Printf("‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: %v\n", err1)
	} else {
		defer resp1.Body.Close()
		fmt.Printf("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %d\n", resp1.StatusCode)
	}

	// –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –º–Ω–æ–≥–æ retry –ø–æ–ø—ã—Ç–æ–∫ (503 –æ—à–∏–±–∫–∞)
	fmt.Println("\nüß™ –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å 503 –æ—à–∏–±–∫–æ–π (–≤—ã–∑–æ–≤–µ—Ç –º–Ω–æ–≥–æ retry)")
	resp2, err2 := client.Get("http://localhost:5000/test/status/503")
	if err2 != nil {
		fmt.Printf("‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: %v\n", err2)
	} else {
		defer resp2.Body.Close()
		fmt.Printf("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %d\n", resp2.StatusCode)
	}

	// –¢–µ—Å—Ç 3: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ retry)
	fmt.Println("\nüß™ –¢–µ—Å—Ç 3: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ retry)")
	resp3, err3 := client.Get("http://localhost:5000/test/status/200")
	if err3 != nil {
		fmt.Printf("‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: %v\n", err3)
	} else {
		defer resp3.Body.Close()
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Å—Ç–∞—Ç—É—Å: %d\n", resp3.StatusCode)
	}

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	fmt.Println("\nüìä –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
	metrics := client.GetMetrics()
	fmt.Printf("  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d\n", metrics.TotalRequests)
	fmt.Printf("  –£—Å–ø–µ—à–Ω—ã—Ö: %d\n", metrics.SuccessfulReqs)
	fmt.Printf("  –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: %d\n", metrics.FailedRequests)
	fmt.Printf("  –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: %v\n", metrics.AverageLatency)

	fmt.Println("\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ retry –º–µ—Ç—Ä–∏–∫–∏:")
	fmt.Println("  Retry –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ OpenTelemetry/Prometheus")
	fmt.Println("  –î–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000/metrics")
	fmt.Println()
	fmt.Println("  –ü—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫:")
	fmt.Println("  http_retries_total{method=\"GET\",url=\"...\",attempt=\"2\",success=\"false\"}")
	fmt.Println("  http_retries_total{method=\"GET\",url=\"...\",attempt=\"3\",success=\"true\"}")

	fmt.Println("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	fmt.Println("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏: http://localhost:5000/metrics")
}
