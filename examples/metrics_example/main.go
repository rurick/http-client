package main

import (
	"fmt"
	"log"
	"time"

	httpclient "gitlab.citydrive.tech/back-end/go/pkg/http-client"
)

func main() {
	basicMetricsExample()
	realTimeMonitoringExample()
	decisionMakingExample()
	performanceTestingExample()
}

// basicMetricsExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
func basicMetricsExample() {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ ===")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
	client, err := httpclient.NewClient(
		httpclient.WithMetrics(true),
		httpclient.WithTimeout(5*time.Second),
	)
	if err != nil {
		log.Fatal(err)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
	fmt.Println("–í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")

	// –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
	client.Get("https://httpbin.org/get")
	client.Get("https://httpbin.org/json")

	// –ó–∞–ø—Ä–æ—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏
	client.Get("https://httpbin.org/status/404")
	client.Get("https://httpbin.org/status/500")

	// –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
	client.Get("https://httpbin.org/delay/2")

	// –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
	metrics := client.GetMetrics()

	fmt.Printf("\n--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ ---\n")
	fmt.Printf("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d\n", metrics.TotalRequests)
	fmt.Printf("–£—Å–ø–µ—à–Ω—ã–µ: %d\n", metrics.SuccessfulReqs)
	fmt.Printf("–ù–µ—É–¥–∞—á–Ω—ã–µ: %d\n", metrics.FailedRequests)
	fmt.Printf("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: %.1f%%\n",
		float64(metrics.SuccessfulReqs)/float64(metrics.TotalRequests)*100)

	fmt.Printf("\n--- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ---\n")
	fmt.Printf("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: %v\n", metrics.AverageLatency)
	fmt.Printf("–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∑–∞–¥–µ—Ä–∂–∫–∏, —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã, —Ä–∞–∑–º–µ—Ä—ã) –¥–æ—Å—Ç—É–ø–Ω—ã –≤ OpenTelemetry/Prometheus\n")
}

// realTimeMonitoringExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
func realTimeMonitoringExample() {
	fmt.Println("\n=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ===")

	client, err := httpclient.NewClient(
		httpclient.WithMetrics(true),
	)
	if err != nil {
		log.Fatal(err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		ticker := time.NewTicker(3 * time.Second)
		defer ticker.Stop()

		for i := 0; i < 3; i++ {
			<-ticker.C
			metrics := client.GetMetrics()

			if metrics.TotalRequests > 0 {
				successRate := float64(metrics.SuccessfulReqs) / float64(metrics.TotalRequests) * 100
				fmt.Printf("[–ú–û–ù–ò–¢–û–†–ò–ù–ì] –ó–∞–ø—Ä–æ—Å–æ–≤: %d, –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %.1f%%, –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: %v\n",
					metrics.TotalRequests, successRate, metrics.AverageLatency)

				// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
				if successRate < 80 {
					fmt.Printf("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: %.1f%%\n", successRate)
				}

				if metrics.AverageLatency > 2*time.Second {
					fmt.Printf("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: %v\n", metrics.AverageLatency)
				}
			}
		}
	}()

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
	fmt.Println("–ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É...")
	for i := 0; i < 10; i++ {
		if i%3 == 0 {
			// –ò–Ω–æ–≥–¥–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
			client.Get("https://httpbin.org/delay/1")
		} else if i%4 == 0 {
			// –ò–Ω–æ–≥–¥–∞ –æ—à–∏–±–∫–∏
			client.Get("https://httpbin.org/status/500")
		} else {
			// –û–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
			client.Get("https://httpbin.org/get")
		}
		time.Sleep(500 * time.Millisecond)
	}

	time.Sleep(4 * time.Second) // –ñ–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
}

// decisionMakingExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
func decisionMakingExample() {
	fmt.Println("\n=== –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ ===")

	client, err := httpclient.NewClient(
		httpclient.WithMetrics(true),
	)
	if err != nil {
		log.Fatal(err)
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
	checkServiceHealth := func(serviceName string) bool {
		metrics := client.GetMetrics()

		if metrics.TotalRequests == 0 {
			return true // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
		}

		errorRate := float64(metrics.FailedRequests) / float64(metrics.TotalRequests)
		avgLatency := metrics.AverageLatency

		fmt.Printf("–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–∞ %s:\n", serviceName)
		fmt.Printf("  - –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: %.1f%%\n", errorRate*100)
		fmt.Printf("  - –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: %v\n", avgLatency)

		// –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
		if errorRate > 0.3 { // –ë–æ–ª–µ–µ 30% –æ—à–∏–±–æ–∫
			fmt.Printf("  - ‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–∑–¥–æ—Ä–æ–≤: –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫\n")
			return false
		}

		if avgLatency > 3*time.Second { // –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥
			fmt.Printf("  - ‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–∑–¥–æ—Ä–æ–≤: –≤—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞\n")
			return false
		}

		fmt.Printf("  - ‚úÖ –°–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤\n")
		return true
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º "–ø–ª–æ—Ö–æ–π" —Å–µ—Ä–≤–∏—Å
	fmt.Println("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å...")
	for i := 0; i < 5; i++ {
		client.Get("https://httpbin.org/status/500") // –í—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞
	}

	if !checkServiceHealth("ProblematicAPI") {
		fmt.Println("‚û°Ô∏è  –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è "—Ö–æ—Ä–æ—à–µ–≥–æ" —Å–µ—Ä–≤–∏—Å–∞
	goodClient, _ := httpclient.NewClient(
		httpclient.WithMetrics(true),
	)

	fmt.Println("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å...")
	for i := 0; i < 5; i++ {
		goodClient.Get("https://httpbin.org/get") // –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
	}

	if checkServiceHealth("StableAPI") {
		fmt.Println("‚û°Ô∏è  –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å")
	}
}

// performanceTestingExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ç–µ—Å—Ç–∞—Ö
func performanceTestingExample() {
	fmt.Println("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")

	client, err := httpclient.NewClient(
		httpclient.WithMetrics(true),
		httpclient.WithTimeout(10*time.Second),
	)
	if err != nil {
		log.Fatal(err)
	}

	// –ò–º–∏—Ç–∏—Ä—É–µ–º performance —Ç–µ—Å—Ç
	fmt.Println("–í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç...")

	startTime := time.Now()

	// –í—ã–ø–æ–ª–Ω—è–µ–º 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	done := make(chan bool, 10)
	for i := 0; i < 10; i++ {
		go func(id int) {
			client.Get("https://httpbin.org/get")
			done <- true
		}(i)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	for i := 0; i < 10; i++ {
		<-done
	}

	testDuration := time.Since(startTime)
	metrics := client.GetMetrics()

	fmt.Printf("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ---\n")
	fmt.Printf("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: %v\n", testDuration)
	fmt.Printf("–ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %d\n", metrics.TotalRequests)
	fmt.Printf("–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: %.1f\n",
		float64(metrics.TotalRequests)/testDuration.Seconds())

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	fmt.Printf("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ---\n")

	if metrics.AverageLatency < 1*time.Second {
		fmt.Printf("‚úÖ –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞—è: %v\n", metrics.AverageLatency)
	} else {
		fmt.Printf("‚ùå –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è: %v\n", metrics.AverageLatency)
	}

	successRate := float64(metrics.SuccessfulReqs) / float64(metrics.TotalRequests) * 100
	if successRate >= 95.0 {
		fmt.Printf("‚úÖ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è: %.1f%%\n", successRate)
	} else {
		fmt.Printf("‚ùå –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è: %.1f%%\n", successRate)
	}

	if testDuration < 5*time.Second {
		fmt.Printf("‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º–æ–µ: %v\n", testDuration)
	} else {
		fmt.Printf("‚ùå –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ: %v\n", testDuration)
	}

	fmt.Println("\n--- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ---")
	if metrics.AverageLatency < 1*time.Second && successRate >= 95.0 && testDuration < 5*time.Second {
		fmt.Println("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ü–†–û–ô–î–ï–ù–´!")
	} else {
		fmt.Println("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
	}
}
